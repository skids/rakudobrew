#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
use Cwd;
use FindBin qw($Bin);
use File::Path qw(remove_tree);
use File::Basename qw(basename dirname);
use Carp qw(croak);

my $arg = shift // 'help';
my $prefix = "$Bin/..";
my $git_reference = "$prefix/git_reference" ;

unless (-d $git_reference) {
    mkdir $git_reference;
}

my %git_repos = (
    rakudo => 'git://github.com/rakudo/rakudo.git',
    MoarVM => 'git://github.com/MoarVM/MoarVM.git',
    nqp    => 'git://github.com/perl6/nqp.git',
    panda  => 'git://github.com/tadzik/panda.git',
);

my $GIT = $ENV{GIT_BINARY} // 'git';
my $PERL5 = $^X;

my %impls = (
    jvm => {
        name      => "jvm",
        weight    => 20,
        configure => "$PERL5 Configure.pl --backends=jvm --gen-nqp --git-reference=$git_reference --make-install",
        need_repo => ['rakudo', 'nqp'],
    },
    moar => {
        name      => "moar",
        weight    => 30,
        configure => "$PERL5 Configure.pl --backends=moar --gen-moar --git-reference=$git_reference --make-install",
        need_repo => ['rakudo', 'nqp', 'MoarVM'],
    },
);

sub run {
    system(@_) and croak "Failed running ".$_[0]
}

if ($arg eq 'switch') {
    my $impl = shift;
    switch($impl);
} elsif ($arg eq 'nuke') {
    my $impl = shift;
    nuke($impl);
} elsif ($arg eq 'rehash') {
    rehash();
} elsif ($arg eq 'list') {
    my $cur = current() || '';
    map { say $cur eq $_ ? "* $_" : "  $_" } list();
} elsif ($arg eq 'list-available') {
    my ($cur_backend, $cur_rakudo) = split '-', (current() || ''), 2;
    $cur_backend |= '';
    $cur_rakudo |= '';
    say "Available backends:";
    map { say $cur_backend eq $_ ? "* $_" : "  $_" } available_backends();
    say "";
    say "Available Rakudo versions:";
    map { say $cur_rakudo eq $_ ? "* $_" : "  $_" } available_rakudos();
} elsif ($arg eq 'current') {
    if (my $c = current()) {
        say "Currently running $c"
    } else {
        say "Not running anything at the moment. Use 'rakudobrew switch' to set an implementation";
    }
} elsif ($arg eq 'build') {
    my $impl = shift;
    my $ver = shift
        if @ARGV && $ARGV[0] !~ /^--/;
    my $configure_opts = '';
    if (@ARGV && $ARGV[0] =~ /^--configure-opts=/) {
        $configure_opts = shift;
        $configure_opts =~ s/^\-\-configure-opts=//;
        $configure_opts =~ s/^'//;
        $configure_opts =~ s/'$//;
    }
    if ($impl && $impl eq 'all') {
        for (available_backends()) {
            build_impl($_, $ver, $configure_opts);
        }
    } else {
        build_impl($impl, $ver, $configure_opts);
    }
} elsif ($arg eq 'triple') {
    my ($rakudo_ver, $nqp_ver, $moar_ver) = (shift, shift, shift);
    my $configure_opts = '';
    if (@ARGV && $ARGV[0] =~ /^--configure-opts=/) {
        $configure_opts = shift;
        $configure_opts =~ s/^\-\-configure-opts=//;
        $configure_opts =~ s/^'//;
        $configure_opts =~ s/'$//;
    }
    build_triple($rakudo_ver, $nqp_ver, $moar_ver, $configure_opts);
} elsif ($arg eq 'build-panda') {
    my $panda_ver = shift;
    build_panda($panda_ver);
    rehash();
} elsif ($arg eq 'self-upgrade') {
    self_upgrade();
} elsif ($arg eq 'test') {
    my $impl = shift;
    if ($impl && $impl eq 'all') {
        for (list()) {
            test($_);
        }
    } else {
        test($impl);
    }
} else {
    say "Usage:";
    say "rakudobrew current";
    say "rakudobrew list";
    say "rakudobrew list-available";
    say "rakudobrew build " , (join "|", available_backends(), "all"), " [tag|branch|sha-1]", " [--configure-opts=]";
    say "rakudobrew build-panda [panda-ver]";
    say "rakudobrew triple [rakudo-ver [nqp-ver [moar-ver]]] [--configure-opts=]";
    say "rakudobrew rehash";
    say "rakudobrew switch ", (join "|", available_backends());
    say "rakudobrew nuke ", (join "|", available_backends());
    say "rakudobrew self-upgrade";
    say "rakudobrew test [", (join "|", available_backends(), "all"), "]";
}

exit;

sub current {
    if (-e "$prefix/CURRENT") {
        my $cur = slurp("$prefix/CURRENT");
        chomp $cur;
        return $cur;
    }
}

sub available_rakudos {
    my @output = qx|$GIT ls-remote --tags $git_repos{rakudo}|;
    my @tags = grep( m{refs/tags/([^\^]+)\^\{\}}, @output );
    return map(m{tags/([^\^]+)\^}, @tags );
}

sub list {
    opendir(my $dh, $prefix);
    grep {/^[^.]/ && -d "$prefix/$_"
          && $_ ne 'bin' && $_ ne 'git_reference' && $_ ne 'panda'} readdir($dh);
}

sub switch {
    my $impl = shift;
    match_and_run($impl, sub {
        my $matched = shift;
        say "Switching to $matched";
        spurt("$prefix/CURRENT", $matched);
        rehash();
    })
}

sub nuke {
    my $impl = shift;
    match_and_run($impl, sub {
        my $matched = shift;
        say "Nuking $matched";
        remove_tree("$prefix/$matched");
    })
}

sub match_and_run {
    my ($impl, $action) = @_;
    if (!$impl) {
        say "Switch to what?";
        say "Available builds";
        map {say} list();
        return;
    }
    opendir(my $dh, $prefix);
    my @match = grep { /\Q$impl/ } list();
    my ($matched, $ambiguous) = @match;
    if ($ambiguous) {
        my ($exact) = grep { $_ eq $impl } @match;
        if ($exact) {
            ($matched, $ambiguous) = $exact;
        }
    }
    if ($matched and not $ambiguous) {
        $action->($matched);
    } elsif (@match) {
        say "Sorry, I'm not sure if you mean:";
        say $_ for @match;
    } else {
        say "Sorry, I have no idea what '$impl' is";
    }
}

sub available_backends {
    map {$_->{name}} sort {$a->{weight} <=> $b->{weight}} values %impls;
}

sub build_impl {
    my ($impl, $ver, $configure_opts) = @_;
    unless (defined $impl) {
        say "Build what?";
        my ($cur) = split '-', (current() // ''), 2;
        $cur //= '';
        map { say $cur eq $_ ? "* $_" : "  $_" } available_backends();
        return;
    }
    if ($impl eq "panda") {
        build_panda();
        return;
    }
    unless (exists $impls{$impl}) {
        say "Building Rakudo with backend '$impl' is NYI. Well volunteered!";
        return;
    }
    $ver //= 'nom';
    chdir $prefix;
    unless (-d "$impl-$ver") {
        for(@{$impls{$impl}{need_repo}}) {
            update_git_reference($_);
        }
        run "$GIT clone --reference $git_reference/rakudo $git_repos{rakudo} $impl-$ver";
    }
    chdir "$impl-$ver";
    run "$GIT fetch";
    # of people say 'build somebranch', they usually mean 'build origin/somebranch'
    my $ver_to_checkout = $ver;
    eval {
        run "$GIT rev-parse -q --verify origin/$ver";
        $ver_to_checkout = "origin/$ver";
    };
    run "$GIT checkout $ver_to_checkout";

    run $impls{$impl}{configure} . " $configure_opts";

    if (-d 'panda') {
        say "Updating panda as well";
        my $oldcur = current();
        switch("$impl-$ver");
        build_panda();
        switch($oldcur);
    }
    unless (current()) {
        switch("$impl-$ver");
    }
    say "Done, $impl-$ver built";
}

sub update_git_reference {
    my $repo = shift;
    my $back = cwd();
    print "Update git reference: $repo\n";
    chdir $git_reference;
    unless (-d $repo) {
        run "$GIT clone $git_repos{$repo} $repo";
    }
    chdir $repo;
    run "$GIT pull";
    chdir $back;
}

sub build_triple {
    my ($rakudo_ver, $nqp_ver, $moar_ver, $configure_opts) = @_;
    my $impl = "moar";
    $rakudo_ver //= 'HEAD';
    $nqp_ver //= 'HEAD';
    $moar_ver //= 'HEAD';
    my $rakudo_opts = my $nqp_opts = my $moar_opts = "";
    unless ($configure_opts =~ /--prefix=/) {
        $nqp_opts .= " --prefix=../install";
        $moar_opts .= " --prefix=../../install";
    }
    my @configure_opts = split(/(?:^|\s+)\-\-/, $configure_opts);

    # Try to send the right options to the right Configure.pl.
    # May need an update from time to time.  Note we do not
    # need to validate the options just route them, and we
    # do not support sending different values to the same option.
    # Also we don't pass on options that interfere with the triplet.
    for my $mopt (qw(debug optimize instrument os shell toolchain
                     compiler ar cc ld make has-sha has-libuv
                     static has-libtommath has-libatomic_ops
                     has-dyncall build host big-endian jit
                     enable-jit lua has-dynasm prefix bindir libdir
                     mastdir make-install asan)) {
        for my $copt (@configure_opts) {
            next unless $copt =~ /\S+/;
            $moar_opts .= " --" . $copt
                if $copt =~ m/^$mopt$/
                or $copt =~ m/^$mopt\=/
                or $copt =~ m/^no-$mopt$/
                or $copt =~ m/^no$mopt$/
        }
    }
    for my $nopt (qw(prefix no-clean makefile-timing)) {
        for my $copt (@configure_opts) {
            next unless $copt =~ /\S+/;
            $nqp_opts .= " --" . $copt
                if $copt =~ m/^$nopt$/
                or $copt =~ m/^$nopt\=/
                or $copt =~ m/^no-$nopt$/
                or $copt =~ m/^no$nopt$/
        }
    }
    for my $ropt (qw(prefix no-clean makefile-timing)) {
        for my $copt (@configure_opts) {
            next unless $copt =~ /\S+/;
            $rakudo_opts .= " --" . $copt
                if $copt =~ m/^$ropt$/
                or $copt =~ m/^$ropt\=/
                or $copt =~ m/^no-$ropt$/
                or $copt =~ m/^no$ropt$/
        }
    }

    chdir $prefix;
    my $name = "$impl-$rakudo_ver-$nqp_ver-$moar_ver";
    unless (-d $name) {
        update_git_reference('rakudo');
        run "$GIT clone --reference $git_reference/rakudo $git_repos{rakudo} $name";
    }
    chdir $name;
    run "$GIT pull";
    run "$GIT checkout $rakudo_ver";
    if (-e 'Makefile') {
        run 'make realclean';
    }

    unless (-d "nqp") {
        update_git_reference('nqp');
        run "$GIT clone --reference $git_reference/nqp $git_repos{nqp}";
    }
    chdir "nqp";
    run "$GIT pull";
    run "$GIT checkout $nqp_ver";

    unless (-d "MoarVM") {
        update_git_reference('MoarVM');
        run "$GIT clone --reference $git_reference/MoarVM $git_repos{MoarVM}";
    }
    chdir "MoarVM";
    run "$GIT pull";
    run "$GIT checkout $moar_ver";
    run "$PERL5 Configure.pl $moar_opts";
    run "make install";

    chdir "..";
    run "$PERL5 Configure.pl --backend=moar $nqp_opts";
    run "make install";

    chdir "..";
    run "$PERL5 Configure.pl --backend=moar $rakudo_opts";

    if (system 'make install') {
        die "Failed running make install";
    }
    if (-d 'panda') {
        say "Updating panda as well";
        my $oldcur = current();
        switch($name);
        build_panda();
        switch($oldcur);
    }
    unless (current()) {
        switch($name);
    }
    say "Done, $name built";
}

sub build_panda {
    my ($panda_ver) = @_;
    $panda_ver //= 'HEAD';
    my $impl = current();
    chdir "$prefix/$impl";
    unless (-d 'panda') {
        run "$GIT clone $git_repos{panda}";
    }
    chdir 'panda';
    run "$GIT pull";
    run "$GIT checkout $panda_ver";
    run "perl6 rebootstrap.pl";
    say "Done, built panda for $impl";
}

sub slurp {
    my $file = shift;
    open(my $fh, '<', $file);
    local $/ = '';
    my $ret = <$fh>;
    close($fh);
    return $ret;
}

sub spurt {
    my ($file, $cont) = @_;
    open(my $fh, '>', $file);
    say $fh $cont;
    close($fh);
}

sub rehash {
    sub dir {
        my $name = shift;
        opendir(my $dh, $name) or return;
        my @ret;
        while (my $entry = readdir $dh) {
            next if $entry =~ /^\./;
            push @ret, "$name/$entry"
        }
        closedir $dh;
        return @ret;
    }

    sub spurt_shim {
        my ($source, $destdir) = @_;
        my $dirname  = dirname $source;
        my $basename = basename $source;

        my $contents;
        if ($^O =~ /win32/i) {
            $contents = sprintf "\"%s\" %%*", $source;
        } else {
            my $tmpl = "#!/bin/sh\nPATH=%s:\$PATH %s \"\$\@\"";
            $contents = sprintf $tmpl, $dirname, $basename;
        }

        spurt("$destdir/$basename", $contents);
        chmod 0755, "$destdir/$basename";
    }

    my $current = current() or return;
    my ($type) = split '-', $current;

    my @paths = ("$prefix/$current/install/bin", "$prefix/$current/install/share/perl6/site/bin");

    say "Updating shims";
    my @bins = map { dir($_) } @paths;
    # TODO: Remove those that were there before?
    for (@bins) {
        spurt_shim $_, "$prefix/bin";
    }
}

sub self_upgrade {
    chdir $prefix;
    run "$GIT pull";
}

sub test {
    my $impl = shift;
    if (!$impl) {
        $impl = current();
    }
    my @match = grep { /\Q$impl/ } list();
    my ($matched, $ambiguous) = @match;
    if ($ambiguous) {
        my ($exact) = grep { $_ eq $impl } @match;
        if ($exact) {
            ($matched, $ambiguous) = $exact;
        }
    }
    if ($matched and not $ambiguous) {
        say "Spectesting $matched";
        chdir "$prefix/$matched";
        run "make spectest";
    } elsif (@match) {
        say "Sorry, I'm not sure if you mean:";
        say $_ for @match;
    } else {
        say "Sorry, I have no idea what '$impl' is";
        say "Have you run 'rakudobrew build $impl' yet?";
    }
}
